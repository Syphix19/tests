local Players = game:GetService("Players")
local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
local ReviveCreatures = {}

local DataFolder = PlayerGui.Data
local SlotsFrame = PlayerGui.SaveSelectionGui.ContainerFrame.AllSlotsFrame.SlotsFra
local Slots = {"Slot1", "Slot2", "Slot3"}
local DeadCreatures =
for i = 1, 3 do
    local Slot = SlotsFrame[tostring(i)]
    local CreatureFrame = Slot.InnerFrame.CreatureFrame
    local CreatureName = CreatureFrame.NameLabel.Text
    local HealthFrame = Slot.InnerFrame.CreatureFrame.StatsFrame.Health
    local MaxHealth = HealthFrame.Max.Text:gsub("/", "")

    if CreatureFrame.Visible == true then
        local creatureData = {
            Name = CreatureName,
            MaxHealth = tonumber(MaxHealth),
        }

        table.insert(ReviveCreatures, creatureData)
    end
end 

local function CheckDeadCreature(Data)
    local Dino = Data:FindFirstChild("Dino")
    local Health = Data:FindFirstChild("Health")

    if Dino then
        for _, v in ipairs(ReviveCreatures) do
            if Dino.Value == v.Name and Health.Value == 0 then
                Health.Value = v.MaxHealth
                DeadCreatures = DeadCreatures + 1
            end
        end
    end
end

for _, Slots in pairs(DataFolder.Slots:GetChildren()) do
    CheckDeadCreature(Slots)
end

for _, Slot in pairs(Slots) do
    local CreatureSlots = DataFolder[Slot]

    if CreatureSlots then
        CheckDeadCreature(CreatureSlots)
    end
end      
